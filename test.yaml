---
# Source: compass/templates/registration-job.yaml

apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-compass-registration
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: release-name-compass-registration
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: release-name-compass-registration
subjects:
  - kind: ServiceAccount
    name: release-name-compass-registration
    namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: release-name-compass-registration
  namespace: default
rules:
  - apiGroups: ["*"]
    resources: ["secrets"]
    verbs: ["create", "get"]
---
apiVersion: batch/v1
kind: Job
metadata:
  name: release-name-compass-registration
  namespace: default
  annotations:
    "helm.sh/hook": post-install, post-upgrade
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": before-hook-creation
spec:
  backoffLimit: 0
  template:
    metadata:
      name: release-name-compass-registration
    spec:
      serviceAccountName: release-name-compass-registration
      restartPolicy: Never
      containers:
        - name: release-name-compass-registration
          image: "eu.gcr.io/kyma-project/test-infra/alpine-kubectl:v20200310-5f52f407"
          command:
            - bash
            - -c
            - |
              MAX_RETRIES=60
              DIRECTOR_URL=http://compass-director.default.svc.cluster.local:3000/graphql
              DIRECTOR_HEALTHZ_URL=http://compass-director.default.svc.cluster.local:3000/healthz

              SCOPES="runtime:write runtime:read integration_system:read integration_system:write"
              TOKEN_PAYLOAD='{"scopes": "'${SCOPES}'","tenant":"3e64ebae-38b5-46a0-b1ed-9ccee153a0ae"}'
              ENCODED_TOKEN_PAYLOAD=$(echo -e ${TOKEN_PAYLOAD} | base64 | tr -d \\n)
              INTERNAL_TOKEN="eyJhbGciOiJub25lIiwidHlwIjoiSldUIn0.${ENCODED_TOKEN_PAYLOAD//=}."
              SYSTEM_BROKER_SECRET_NAME=compass-system-broker-credentials

              function wait_for_access_to_api_server() {
                local cnt=0
                set +o errexit
                while :
                do
                  kubectl version > /dev/null 2>&1
                  if [[ $? -eq 0 ]]; then
                    echo "Successfully accessed API Server"
                    break
                  else
                    ((cnt++))
                    if (( cnt > $MAX_RETRIES )); then
                      echo "Max retries has been reached (retries $MAX_RETRIES). Exit."
                      exit 1
                    fi

                    echo "Cannot access API Server waiting 5s..."
                    sleep 5
                  fi
                done
                set -o errexit
              }

              function director_readiness() {
                local cnt=0
                set +o errexit
                while :
                do
                RESPONSE_CODE=$(curl -k -s "${DIRECTOR_HEALTHZ_URL}" \
                --write-out "%{http_code}\n" --output /dev/null)
                if [[ "$RESPONSE_CODE" == "200" ]]
                then
                  echo "Director ready."
                  break
                else
                  ((cnt++))
                  if (( cnt > $MAX_RETRIES )); then
                    echo "Max retries has been reached (retries $MAX_RETRIES). Exit."
                    exit 1
                  fi

                  echo "Director not ready! StatusCode: '${RESPONSE_CODE}' - waiting 5s..."
                  sleep 5
                fi
                done
                set -o errexit
              }

              function register_integration_system() {
                set +o pipefail

                NAME=$1
                DESCRIPTION=$2
                SECRET_NAME=$3

                check_registeration_status $NAME

                if [ -z $INTEGRATION_SYSTEM_ID ]; then
                  echo "Creating $NAME integration system - in progress."

                  RESPONSE_BODY=$(curl -k "${DIRECTOR_URL}" \
                    -H 'Content-Type: application/json' \
                    -H "authorization: Bearer ${INTERNAL_TOKEN}" \
                    --data-binary '{
                      "query":"mutation registerIntegrationSystem {\n  result: registerIntegrationSystem(\n    in: { name: \"'"$NAME"'\", description: \"'"$DESCRIPTION"'\" }\n  ) {\n    id\n  }\n}\n"
                    }')
                  echo $RESPONSE_BODY
                  INTEGRATION_SYSTEM_ID=$(echo $RESPONSE_BODY | jq -er '.data .result .id')
                fi

                CREDENTIAL_RESPONSE_BODY=$(curl -k "${DIRECTOR_URL}" \
                  -H 'Content-Type: application/json' \
                  -H 'Accept: application/json' \
                  -H 'Connection: keep-alive' \
                  -H "authorization: Bearer ${INTERNAL_TOKEN}" \
                  --data-binary '{"query":"mutation requestCredentials {\n\trequestClientCredentialsForIntegrationSystem (id : \"'"$INTEGRATION_SYSTEM_ID"'\") {\n    id\n    auth {\n      credential {\n        ... on BasicCredentialData {\n            username\n            password\n        }\n        ...  on OAuthCredentialData {\n            clientId\n            clientSecret\n            url\n        }\n      }\n    }\n  }\n}\n"
                 }')

                CLIENT_ID=$(echo $CREDENTIAL_RESPONSE_BODY | jq -er '.data .requestClientCredentialsForIntegrationSystem .auth .credential .clientId')
                CLIENT_SECRET=$(echo $CREDENTIAL_RESPONSE_BODY | jq -er '.data .requestClientCredentialsForIntegrationSystem .auth .credential .clientSecret')
                TOKENS_ENDPOINT=$(echo $CREDENTIAL_RESPONSE_BODY | jq -er '.data .requestClientCredentialsForIntegrationSystem .auth .credential .url')

                kubectl create secret generic ${SECRET_NAME} --from-literal=client_id=$CLIENT_ID --from-literal=client_secret=$CLIENT_SECRET --from-literal=tokens_endpoint=$TOKENS_ENDPOINT -n default

                echo "$NAME integration system registration and requesting credentials - finished."
                set -o pipefail
              }

              function ensure_secret() {
                set +o errexit
                NAME=$1
                DESCRIPTION=$2
                SECRET_NAME=$3

                kubectl get secret ${SECRET_NAME} -n default > /dev/null 2>&1
                if [[ $? -ne 0 ]]; then
                  register_integration_system "$NAME" "$DESCRIPTION" "$SECRET_NAME"
                else
                  echo "Secret ${SECRET_NAME} already exists."
                fi
                set -o errexit
              }

              function kill_proxy_and_exit() {
                echo 'killing pilot-agent...'
                curl -XPOST http://127.0.0.1:15020/quitquitquit
                sleep 4
                exit 0
              }

              function check_registeration_status() {
                set +o pipefail

                NAME=$1

                echo "Checking if $NAME is already registered in integration system... "

                INTEGRATION_SYSTEMS=$(curl -k "${DIRECTOR_URL}" \
                  -H 'Content-Type: application/json' \
                  -H "authorization: Bearer ${INTERNAL_TOKEN}" \
                  --data-binary '{
                    "query":"query {\n  result: integrationSystems {\n    data {\n      id\n      name\n      description\n      auths {\n        id\n        auth {\n          credential {\n            ... on BasicCredentialData {\n              username\n              password\n            }\n            ... on OAuthCredentialData {\n              clientId\n              clientSecret\n              url\n            }\n          }\n          additionalHeaders\n          additionalQueryParams\n          requestAuth {\n            csrf {\n              tokenEndpointURL\n              credential {\n                ... on BasicCredentialData {\n                  username\n                  password\n                }\n                ... on OAuthCredentialData {\n                  clientId\n                  clientSecret\n                  url\n                }\n              }\n              additionalHeaders\n              additionalQueryParams\n            }\n          }\n        }\n      }\n    }\n    pageInfo {\n      startCursor\n      endCursor\n      hasNextPage\n    }\n    totalCount\n  }\n}\n"
                  }')

                INTEGRATION_SYSTEM_ID=$(echo $INTEGRATION_SYSTEMS | jq -r --arg name $NAME ' .data.result.data[] | select (.name == $name) | .id')
                if [ ! -z $INTEGRATION_SYSTEM_ID ]; then
                  echo "$NAME is already registered in integration system with id: $INTEGRATION_SYSTEM_ID."
                fi

                set -o pipefail
              }

              trap kill_proxy_and_exit ERR EXIT

              echo "Waiting for access to API Server..."
              wait_for_access_to_api_server

              echo "Checking if director is available..."
              director_readiness

              echo "Checking if system-broker secret with credentials exists..."
              ensure_secret "compass-system-broker" "Compass System Broker" "$SYSTEM_BROKER_SECRET_NAME"


